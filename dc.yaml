version: '3'
services:
  server:
    volumes:
      - ./config.py:/fed-flow/app/config/config.py
      - ./../../../Graphs:/Graphs
      - ./../../../agent:/app/agent
    image: fed-flow:test
    ports:
      - "5002:5002"
    hostname: server
    depends_on:
      - broker
    deploy:
      restart_policy:
        condition: on-failure
    working_dir: /fed-flow/app/fl_training/runner
    entrypoint: bash -c "python3 /fed-flow/app/fl_training/runner/fed_server_run.py -o True -s random_splitting -e True"
  broker:
    image: rabbitmq:3.13-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password

  edge1:
    volumes:
      - ./config.py:/fed-flow/app/config/config.py
    image: fed-flow:test
    ports:
      - "5001:5001"
    hostname: edge1
    deploy:
      restart_policy:
        condition: on-failure
    working_dir: /fed-flow/app/fl_training/runner
    depends_on:
      - server
      - broker
    entrypoint: bash -c "python3 /fed-flow/app/fl_training/runner/fed_edgeserver_run.py -i 0 -o True -s random_splitting -e True"
  client1:
    volumes:
      - ./config.py:/fed-flow/app/config/config.py
    image: fed-flow:test
    hostname: client1
    deploy:
      restart_policy:
        condition: on-failure
    working_dir: /fed-flow/app/fl_training/runner
    depends_on:
      - edge1
      - broker
    entrypoint: bash -c "python3 /fed-flow/energy/service.py & python3 /fed-flow/app/fl_training/runner/fed_client_run.py -i 0 -o True -s random_splitting -e True & wait -n"

#  client2:
#    volumes:
#      - ./config.py:/fed-flow/app/config/config.py
#    image: fed-flow:test
#    hostname: client2
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#        reservations:
#          cpus: '0.5'
#      restart_policy:
#        condition: on-failure
#    working_dir: /fed-flow/app/fl_training/runner
#    depends_on:
#      - edge1
#    entrypoint: bash -c "python3 /fed-flow/app/fl_training/runner/fed_client_run.py -i 1 -o True -s random_splitting -e True & python3 /fed-flow/energy/service.py & wait -n"
#
#  client3:
#    volumes:
#      - ./config.py:/fed-flow/app/config/config.py
#    image: fed-flow:test
#    hostname: client3
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#        reservations:
#          cpus: '0.5'
#      restart_policy:
#        condition: always
#    working_dir: /fed-flow/app/fl_training/runner
#    depends_on:
#      - edge1
#    entrypoint: bash -c "python3 /fed-flow/app/fl_training/runner/fed_client_run.py -i 2 -o True -s random_splitting -e True & python3 /fed-flow/energy/service.py & wait -n"
#
#  client4:
#    volumes:
#      - ./config.py:/fed-flow/app/config/config.py
#    image: fed-flow:test
#    hostname: client4
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#        reservations:
#          cpus: '0.5'
#      restart_policy:
#        condition: always
#    working_dir: /fed-flow/app/fl_training/runner
#    depends_on:
#      - edge1
#    entrypoint: bash -c "python3 /fed-flow/app/fl_training/runner/fed_client_run.py -i 3 -o True -s random_splitting -e True & python3 /fed-flow/energy/service.py & wait -n"
#
#  client5:
#    volumes:
#      - ./config.py:/fed-flow/app/config/config.py
#    image: fed-flow:test
#    hostname: client5
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#        reservations:
#          cpus: '0.5'
#      restart_policy:
#        condition: always
#    working_dir: /fed-flow/app/fl_training/runner
#    depends_on:
#      - edge1
#    entrypoint: bash -c "python3 /fed-flow/app/fl_training/runner/fed_client_run.py -i 4 -o True -s random_splitting -e True & python3 /fed-flow/energy/service.py & wait -n"
